#
# 说明
#
若条件允许，可为每个开发人员赋予不同的操作权限，以保证构架的规范和安全。
共用配置文件改动后请勿提交到版本管理系统，避免影响其他成员的正常开发。

#编码统一按照 UTF-8格式

#
# 开发约定
#
JSON返回结果
状态码status：0 - 正常返回，>0 - 发生错误， <0 - 正确码
消息值message：附加数据

#
# MySQL数据库规范
#
尽量避免使用null作为默认值；
外键必须使用null作为不存在对象；
小数据整数采用tinyint；
整数类型不用指定长度，采用默认值；
外键名称采用_id的方式命名；
自关联外键采用parent_id方式命名；
定长字段需要指定实际长度，严禁采用变长类型；
尽量避免过于复杂的关联查询；

#
# MySQL数据库命名约定
#
仅用于关联作用的表，后缀以_rel结束；
状态统一命名为status
添加时间统一命名为create_time；
修改时间统一命名为update_time；
排序统一命名为sort；
备注统一命名为remark；

#
# 命名规范
#
严格采用驼峰法详细命名变量和方法名；
常量按照大写字母加下划线形式命名；
避免出现i、n、j、k之类难于理解的名称；
运行参数命名时，以模块名称作为前缀，避免命名冲突；

#
# Java代码注释规范
#
段注释：/* content */
行注释：code; // content
方法注释：
/**
 * 
 * 方法介绍
 * @access protected
 * @param int code 参数介绍
 * @since  1.0 
 * @return null
 */

#
# 框架分层原则
#
采用Domain层完成业务数据格式和存储格式的转换，为实体类字段提供必要的注释。
现阶段Domain层已覆盖全部的业务逻辑代码，字段属性注释不再写入数据库表结构，便于切换不同种类的数据库。
积极避免在Controller控制层出现Model业务层和View视图部分的代码，如在控制层操作数据、打印Html代码都是不恰当的。

#
# 静态资源部署规范
#
共用代码文件由模块负责人进行维护，小组成员在未经允许的情况下不得擅自修改。
模板文件按模块-控制器-方法名称分级存放，共用模板放在Public目录下。
JS、CSS分模块进行命名，skin中仅存放共用脚本文件，与页面相关的非通用脚本直接写在模板文件中。
图片文件存放在以模块命名的目录下，共用文件放在顶级目录或专有目录（如登录相关图片）下。
第三方接口、控件存放在API目录下，需要经过成员商议后方可使用。
源码包目前按照模块分目录存放，src包下仅放置共用配置文件。

#
# 框架开发规范
#
Domain层主键采用Java对象替代基础数据类型，如主键采用Integer而非int。
Domain层应尽量避免过于复杂或可能产生性能的映射关系，并设置(fetch = FetchType.LAZY)，需要急切加载时在代码中实现。
全部查询及注解等字段采用对象属性名称而非数据库表字段名称。
建议将公用的参数验证，放在对应Controller的setXX方法中。
优先采用FreeMarker视图，具有较好的null值容错处理。
可变字符串优先采用StringBuffer，优先采用for(Map.Entry<String, Object> item : map.entrySet())遍历Map，
其他数据类型视执行效率进行灵活调整。
在遍历Map过程中,不能用map.put(key,newVal),map.remove(key)来修改和删除元素，会引发并发修改异常,
可以通过迭代器Iterator<Map.Entry<Integer, String>> it = map.entrySet().iterator()的it.remove()。
放弃采用?组合SQL语句，采用JPA规范:name赋值。
HQL语句中，不可以直接使用数据库表名和字段名，应按照面向对象的语法进行书写。
当一个视图文件仅用来被包含时，需要添加.inc.后缀，以提高系统的安全性。
新添加记录的修改时间与添加时间相同，操作者也一致。

#
# 界面设计原则
#
简单的业务优先采用弹窗式操作，对于信息量较大的页面，推荐采用单独页面进行处理，以减轻日后维护的负担。

#
# 菜单划分原则
#
菜单主要用于导航和功能划分；
简单的信息分类功能可以集成在信息列表页面，层次较深的分类可采用导航菜单。